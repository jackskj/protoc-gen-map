// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.4
// source: testdata/tests.proto

package testdata

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	examples "github.com/jackskj/protoc-gen-map/examples"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type NestedEnumResponse_NestedMsg_NestedEnum int32

const (
	NestedEnumResponse_NestedMsg_span NestedEnumResponse_NestedMsg_NestedEnum = 0
	NestedEnumResponse_NestedMsg_egg  NestedEnumResponse_NestedMsg_NestedEnum = 1
)

// Enum value maps for NestedEnumResponse_NestedMsg_NestedEnum.
var (
	NestedEnumResponse_NestedMsg_NestedEnum_name = map[int32]string{
		0: "span",
		1: "egg",
	}
	NestedEnumResponse_NestedMsg_NestedEnum_value = map[string]int32{
		"span": 0,
		"egg":  1,
	}
)

func (x NestedEnumResponse_NestedMsg_NestedEnum) Enum() *NestedEnumResponse_NestedMsg_NestedEnum {
	p := new(NestedEnumResponse_NestedMsg_NestedEnum)
	*p = x
	return p
}

func (x NestedEnumResponse_NestedMsg_NestedEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NestedEnumResponse_NestedMsg_NestedEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_testdata_tests_proto_enumTypes[0].Descriptor()
}

func (NestedEnumResponse_NestedMsg_NestedEnum) Type() protoreflect.EnumType {
	return &file_testdata_tests_proto_enumTypes[0]
}

func (x NestedEnumResponse_NestedMsg_NestedEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NestedEnumResponse_NestedMsg_NestedEnum.Descriptor instead.
func (NestedEnumResponse_NestedMsg_NestedEnum) EnumDescriptor() ([]byte, []int) {
	return file_testdata_tests_proto_rawDescGZIP(), []int{15, 0, 0}
}

type TypeCastingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoubleCast    float64              `protobuf:"fixed64,1,opt,name=double_cast,json=doubleCast,proto3" json:"double_cast,omitempty"`         // float64
	FloatCast     float32              `protobuf:"fixed32,2,opt,name=float_cast,json=floatCast,proto3" json:"float_cast,omitempty"`            // float32
	Int32Cast     int32                `protobuf:"varint,3,opt,name=int32_cast,json=int32Cast,proto3" json:"int32_cast,omitempty"`             // int32
	Int64Cast     int64                `protobuf:"varint,4,opt,name=int64_cast,json=int64Cast,proto3" json:"int64_cast,omitempty"`             // int64
	Uint32Cast    uint32               `protobuf:"varint,5,opt,name=uint32_cast,json=uint32Cast,proto3" json:"uint32_cast,omitempty"`          // uint32
	Uint64Cast    uint64               `protobuf:"varint,6,opt,name=uint64_cast,json=uint64Cast,proto3" json:"uint64_cast,omitempty"`          // uint64
	Sint32Cast    int32                `protobuf:"zigzag32,7,opt,name=sint32_cast,json=sint32Cast,proto3" json:"sint32_cast,omitempty"`        // int32
	Sint64Cast    int64                `protobuf:"zigzag64,8,opt,name=sint64_cast,json=sint64Cast,proto3" json:"sint64_cast,omitempty"`        // int64
	Fixed32Cast   uint32               `protobuf:"fixed32,9,opt,name=fixed32_cast,json=fixed32Cast,proto3" json:"fixed32_cast,omitempty"`      // uint32
	Fixed64Cast   uint64               `protobuf:"fixed64,10,opt,name=fixed64_cast,json=fixed64Cast,proto3" json:"fixed64_cast,omitempty"`     // uint64
	Sfixed32Cast  int32                `protobuf:"fixed32,11,opt,name=sfixed32_cast,json=sfixed32Cast,proto3" json:"sfixed32_cast,omitempty"`  // int32
	Sfixed64Cast  int64                `protobuf:"fixed64,12,opt,name=sfixed64_cast,json=sfixed64Cast,proto3" json:"sfixed64_cast,omitempty"`  // int64
	BoolCast      bool                 `protobuf:"varint,13,opt,name=bool_cast,json=boolCast,proto3" json:"bool_cast,omitempty"`               // bool
	StringCast    string               `protobuf:"bytes,14,opt,name=string_cast,json=stringCast,proto3" json:"string_cast,omitempty"`          // string
	TimestampCast *timestamp.Timestamp `protobuf:"bytes,15,opt,name=timestamp_cast,json=timestampCast,proto3" json:"timestamp_cast,omitempty"` // time.Time
}

func (x *TypeCastingResponse) Reset() {
	*x = TypeCastingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_tests_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeCastingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeCastingResponse) ProtoMessage() {}

func (x *TypeCastingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_tests_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeCastingResponse.ProtoReflect.Descriptor instead.
func (*TypeCastingResponse) Descriptor() ([]byte, []int) {
	return file_testdata_tests_proto_rawDescGZIP(), []int{0}
}

func (x *TypeCastingResponse) GetDoubleCast() float64 {
	if x != nil {
		return x.DoubleCast
	}
	return 0
}

func (x *TypeCastingResponse) GetFloatCast() float32 {
	if x != nil {
		return x.FloatCast
	}
	return 0
}

func (x *TypeCastingResponse) GetInt32Cast() int32 {
	if x != nil {
		return x.Int32Cast
	}
	return 0
}

func (x *TypeCastingResponse) GetInt64Cast() int64 {
	if x != nil {
		return x.Int64Cast
	}
	return 0
}

func (x *TypeCastingResponse) GetUint32Cast() uint32 {
	if x != nil {
		return x.Uint32Cast
	}
	return 0
}

func (x *TypeCastingResponse) GetUint64Cast() uint64 {
	if x != nil {
		return x.Uint64Cast
	}
	return 0
}

func (x *TypeCastingResponse) GetSint32Cast() int32 {
	if x != nil {
		return x.Sint32Cast
	}
	return 0
}

func (x *TypeCastingResponse) GetSint64Cast() int64 {
	if x != nil {
		return x.Sint64Cast
	}
	return 0
}

func (x *TypeCastingResponse) GetFixed32Cast() uint32 {
	if x != nil {
		return x.Fixed32Cast
	}
	return 0
}

func (x *TypeCastingResponse) GetFixed64Cast() uint64 {
	if x != nil {
		return x.Fixed64Cast
	}
	return 0
}

func (x *TypeCastingResponse) GetSfixed32Cast() int32 {
	if x != nil {
		return x.Sfixed32Cast
	}
	return 0
}

func (x *TypeCastingResponse) GetSfixed64Cast() int64 {
	if x != nil {
		return x.Sfixed64Cast
	}
	return 0
}

func (x *TypeCastingResponse) GetBoolCast() bool {
	if x != nil {
		return x.BoolCast
	}
	return false
}

func (x *TypeCastingResponse) GetStringCast() string {
	if x != nil {
		return x.StringCast
	}
	return ""
}

func (x *TypeCastingResponse) GetTimestampCast() *timestamp.Timestamp {
	if x != nil {
		return x.TimestampCast
	}
	return nil
}

type TypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeValue string `protobuf:"bytes,1,opt,name=type_value,json=typeValue,proto3" json:"type_value,omitempty"`
}

func (x *TypeRequest) Reset() {
	*x = TypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_tests_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeRequest) ProtoMessage() {}

func (x *TypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_tests_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeRequest.ProtoReflect.Descriptor instead.
func (*TypeRequest) Descriptor() ([]byte, []int) {
	return file_testdata_tests_proto_rawDescGZIP(), []int{1}
}

func (x *TypeRequest) GetTypeValue() string {
	if x != nil {
		return x.TypeValue
	}
	return ""
}

type GoTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoFloat64   float64              `protobuf:"fixed64,1,opt,name=go_float64,json=goFloat64,proto3" json:"go_float64,omitempty"`     // float64
	GoFloat32   float32              `protobuf:"fixed32,2,opt,name=go_float32,json=goFloat32,proto3" json:"go_float32,omitempty"`     // float32
	GoInt32     int32                `protobuf:"varint,3,opt,name=go_int32,json=goInt32,proto3" json:"go_int32,omitempty"`            // int32
	GoInt64     int64                `protobuf:"varint,4,opt,name=go_int64,json=goInt64,proto3" json:"go_int64,omitempty"`            // int64
	GoUint32    uint32               `protobuf:"varint,5,opt,name=go_uint32,json=goUint32,proto3" json:"go_uint32,omitempty"`         // uint32
	GoUint64    uint64               `protobuf:"varint,6,opt,name=go_uint64,json=goUint64,proto3" json:"go_uint64,omitempty"`         // uint64
	GoBool      bool                 `protobuf:"varint,7,opt,name=go_bool,json=goBool,proto3" json:"go_bool,omitempty"`               // bool
	GoString    string               `protobuf:"bytes,8,opt,name=go_string,json=goString,proto3" json:"go_string,omitempty"`          // string
	GoTimestamp *timestamp.Timestamp `protobuf:"bytes,9,opt,name=go_timestamp,json=goTimestamp,proto3" json:"go_timestamp,omitempty"` // timestamp.Timestamp
}

func (x *GoTypesResponse) Reset() {
	*x = GoTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_tests_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoTypesResponse) ProtoMessage() {}

func (x *GoTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_tests_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoTypesResponse.ProtoReflect.Descriptor instead.
func (*GoTypesResponse) Descriptor() ([]byte, []int) {
	return file_testdata_tests_proto_rawDescGZIP(), []int{2}
}

func (x *GoTypesResponse) GetGoFloat64() float64 {
	if x != nil {
		return x.GoFloat64
	}
	return 0
}

func (x *GoTypesResponse) GetGoFloat32() float32 {
	if x != nil {
		return x.GoFloat32
	}
	return 0
}

func (x *GoTypesResponse) GetGoInt32() int32 {
	if x != nil {
		return x.GoInt32
	}
	return 0
}

func (x *GoTypesResponse) GetGoInt64() int64 {
	if x != nil {
		return x.GoInt64
	}
	return 0
}

func (x *GoTypesResponse) GetGoUint32() uint32 {
	if x != nil {
		return x.GoUint32
	}
	return 0
}

func (x *GoTypesResponse) GetGoUint64() uint64 {
	if x != nil {
		return x.GoUint64
	}
	return 0
}

func (x *GoTypesResponse) GetGoBool() bool {
	if x != nil {
		return x.GoBool
	}
	return false
}

func (x *GoTypesResponse) GetGoString() string {
	if x != nil {
		return x.GoString
	}
	return ""
}

func (x *GoTypesResponse) GetGoTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.GoTimestamp
	}
	return nil
}

type RepeatedAssociationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlogId uint32         `protobuf:"varint,1,opt,name=blog_id,json=blogId,proto3" json:"blog_id,omitempty"`
	Post   *examples.Post `protobuf:"bytes,2,opt,name=post,proto3" json:"post,omitempty"` //blog-post is has-many (collection)
}

func (x *RepeatedAssociationsResponse) Reset() {
	*x = RepeatedAssociationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_tests_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedAssociationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedAssociationsResponse) ProtoMessage() {}

func (x *RepeatedAssociationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_tests_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedAssociationsResponse.ProtoReflect.Descriptor instead.
func (*RepeatedAssociationsResponse) Descriptor() ([]byte, []int) {
	return file_testdata_tests_proto_rawDescGZIP(), []int{3}
}

func (x *RepeatedAssociationsResponse) GetBlogId() uint32 {
	if x != nil {
		return x.BlogId
	}
	return 0
}

func (x *RepeatedAssociationsResponse) GetPost() *examples.Post {
	if x != nil {
		return x.Post
	}
	return nil
}

type AuthorUserNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorUsername string `protobuf:"bytes,1,opt,name=author_username,json=authorUsername,proto3" json:"author_username,omitempty"`
}

func (x *AuthorUserNameResponse) Reset() {
	*x = AuthorUserNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_tests_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorUserNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorUserNameResponse) ProtoMessage() {}

func (x *AuthorUserNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_tests_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorUserNameResponse.ProtoReflect.Descriptor instead.
func (*AuthorUserNameResponse) Descriptor() ([]byte, []int) {
	return file_testdata_tests_proto_rawDescGZIP(), []int{4}
}

func (x *AuthorUserNameResponse) GetAuthorUsername() string {
	if x != nil {
		return x.AuthorUsername
	}
	return ""
}

type RepeatedPrimativeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepeatedInt []uint32 `protobuf:"varint,1,rep,packed,name=repeated_int,json=repeatedInt,proto3" json:"repeated_int,omitempty"`
}

func (x *RepeatedPrimativeResponse) Reset() {
	*x = RepeatedPrimativeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_tests_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedPrimativeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedPrimativeResponse) ProtoMessage() {}

func (x *RepeatedPrimativeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_tests_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedPrimativeResponse.ProtoReflect.Descriptor instead.
func (*RepeatedPrimativeResponse) Descriptor() ([]byte, []int) {
	return file_testdata_tests_proto_rawDescGZIP(), []int{5}
}

func (x *RepeatedPrimativeResponse) GetRepeatedInt() []uint32 {
	if x != nil {
		return x.RepeatedInt
	}
	return nil
}

type RepeatedEmptyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlogId        uint32           `protobuf:"varint,1,opt,name=blog_id,json=blogId,proto3" json:"blog_id,omitempty"`
	EmptyResponse []*EmptyResponse `protobuf:"bytes,2,rep,name=empty_response,json=emptyResponse,proto3" json:"empty_response,omitempty"`
}

func (x *RepeatedEmptyResponse) Reset() {
	*x = RepeatedEmptyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_tests_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedEmptyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedEmptyResponse) ProtoMessage() {}

func (x *RepeatedEmptyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_tests_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedEmptyResponse.ProtoReflect.Descriptor instead.
func (*RepeatedEmptyResponse) Descriptor() ([]byte, []int) {
	return file_testdata_tests_proto_rawDescGZIP(), []int{6}
}

func (x *RepeatedEmptyResponse) GetBlogId() uint32 {
	if x != nil {
		return x.BlogId
	}
	return 0
}

func (x *RepeatedEmptyResponse) GetEmptyResponse() []*EmptyResponse {
	if x != nil {
		return x.EmptyResponse
	}
	return nil
}

type RepeatedTimestampResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlogId        uint32                 `protobuf:"varint,1,opt,name=blog_id,json=blogId,proto3" json:"blog_id,omitempty"`
	PostCreatedOn []*timestamp.Timestamp `protobuf:"bytes,2,rep,name=post_created_on,json=postCreatedOn,proto3" json:"post_created_on,omitempty"`
}

func (x *RepeatedTimestampResponse) Reset() {
	*x = RepeatedTimestampResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_tests_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedTimestampResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedTimestampResponse) ProtoMessage() {}

func (x *RepeatedTimestampResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_tests_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedTimestampResponse.ProtoReflect.Descriptor instead.
func (*RepeatedTimestampResponse) Descriptor() ([]byte, []int) {
	return file_testdata_tests_proto_rawDescGZIP(), []int{7}
}

func (x *RepeatedTimestampResponse) GetBlogId() uint32 {
	if x != nil {
		return x.BlogId
	}
	return 0
}

func (x *RepeatedTimestampResponse) GetPostCreatedOn() []*timestamp.Timestamp {
	if x != nil {
		return x.PostCreatedOn
	}
	return nil
}

type NestedFieldResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlogId uint32         `protobuf:"varint,1,opt,name=blog_id,json=blogId,proto3" json:"blog_id,omitempty"`
	Empty  *EmptyResponse `protobuf:"bytes,2,opt,name=empty,proto3" json:"empty,omitempty"`
}

func (x *NestedFieldResponse) Reset() {
	*x = NestedFieldResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_tests_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedFieldResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedFieldResponse) ProtoMessage() {}

func (x *NestedFieldResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_tests_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedFieldResponse.ProtoReflect.Descriptor instead.
func (*NestedFieldResponse) Descriptor() ([]byte, []int) {
	return file_testdata_tests_proto_rawDescGZIP(), []int{8}
}

func (x *NestedFieldResponse) GetBlogId() uint32 {
	if x != nil {
		return x.BlogId
	}
	return 0
}

func (x *NestedFieldResponse) GetEmpty() *EmptyResponse {
	if x != nil {
		return x.Empty
	}
	return nil
}

type AssociationInCollectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId   uint32     `protobuf:"varint,1,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	TagPost []*TagPost `protobuf:"bytes,2,rep,name=tag_post,json=tagPost,proto3" json:"tag_post,omitempty"`
}

func (x *AssociationInCollectionResponse) Reset() {
	*x = AssociationInCollectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_tests_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssociationInCollectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociationInCollectionResponse) ProtoMessage() {}

func (x *AssociationInCollectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_tests_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociationInCollectionResponse.ProtoReflect.Descriptor instead.
func (*AssociationInCollectionResponse) Descriptor() ([]byte, []int) {
	return file_testdata_tests_proto_rawDescGZIP(), []int{9}
}

func (x *AssociationInCollectionResponse) GetTagId() uint32 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *AssociationInCollectionResponse) GetTagPost() []*TagPost {
	if x != nil {
		return x.TagPost
	}
	return nil
}

type TagPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostId   uint32    `protobuf:"varint,1,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	PostBlog *PostBlog `protobuf:"bytes,2,opt,name=post_blog,json=postBlog,proto3" json:"post_blog,omitempty"`
}

func (x *TagPost) Reset() {
	*x = TagPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_tests_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagPost) ProtoMessage() {}

func (x *TagPost) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_tests_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagPost.ProtoReflect.Descriptor instead.
func (*TagPost) Descriptor() ([]byte, []int) {
	return file_testdata_tests_proto_rawDescGZIP(), []int{10}
}

func (x *TagPost) GetPostId() uint32 {
	if x != nil {
		return x.PostId
	}
	return 0
}

func (x *TagPost) GetPostBlog() *PostBlog {
	if x != nil {
		return x.PostBlog
	}
	return nil
}

type PostBlog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlogId uint32 `protobuf:"varint,1,opt,name=blog_id,json=blogId,proto3" json:"blog_id,omitempty"`
}

func (x *PostBlog) Reset() {
	*x = PostBlog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_tests_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostBlog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostBlog) ProtoMessage() {}

func (x *PostBlog) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_tests_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostBlog.ProtoReflect.Descriptor instead.
func (*PostBlog) Descriptor() ([]byte, []int) {
	return file_testdata_tests_proto_rawDescGZIP(), []int{11}
}

func (x *PostBlog) GetBlogId() uint32 {
	if x != nil {
		return x.BlogId
	}
	return 0
}

type NestedBlog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlogId    uint32           `protobuf:"varint,1,opt,name=blog_id,json=blogId,proto3" json:"blog_id,omitempty"`
	BlogTitle string           `protobuf:"bytes,2,opt,name=blog_title,json=blogTitle,proto3" json:"blog_title,omitempty"`
	Author    *examples.Author `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
}

func (x *NestedBlog) Reset() {
	*x = NestedBlog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_tests_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedBlog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedBlog) ProtoMessage() {}

func (x *NestedBlog) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_tests_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedBlog.ProtoReflect.Descriptor instead.
func (*NestedBlog) Descriptor() ([]byte, []int) {
	return file_testdata_tests_proto_rawDescGZIP(), []int{12}
}

func (x *NestedBlog) GetBlogId() uint32 {
	if x != nil {
		return x.BlogId
	}
	return 0
}

func (x *NestedBlog) GetBlogTitle() string {
	if x != nil {
		return x.BlogTitle
	}
	return ""
}

func (x *NestedBlog) GetAuthor() *examples.Author {
	if x != nil {
		return x.Author
	}
	return nil
}

type CollectionInAssociationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostId uint32   `protobuf:"varint,1,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	Post   *OnePost `protobuf:"bytes,2,opt,name=post,proto3" json:"post,omitempty"`
}

func (x *CollectionInAssociationResponse) Reset() {
	*x = CollectionInAssociationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_tests_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionInAssociationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionInAssociationResponse) ProtoMessage() {}

func (x *CollectionInAssociationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_tests_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionInAssociationResponse.ProtoReflect.Descriptor instead.
func (*CollectionInAssociationResponse) Descriptor() ([]byte, []int) {
	return file_testdata_tests_proto_rawDescGZIP(), []int{13}
}

func (x *CollectionInAssociationResponse) GetPostId() uint32 {
	if x != nil {
		return x.PostId
	}
	return 0
}

func (x *CollectionInAssociationResponse) GetPost() *OnePost {
	if x != nil {
		return x.Post
	}
	return nil
}

type OnePost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Comment []*examples.Comment `protobuf:"bytes,2,rep,name=comment,proto3" json:"comment,omitempty"`
}

func (x *OnePost) Reset() {
	*x = OnePost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_tests_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnePost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnePost) ProtoMessage() {}

func (x *OnePost) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_tests_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnePost.ProtoReflect.Descriptor instead.
func (*OnePost) Descriptor() ([]byte, []int) {
	return file_testdata_tests_proto_rawDescGZIP(), []int{14}
}

func (x *OnePost) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OnePost) GetComment() []*examples.Comment {
	if x != nil {
		return x.Comment
	}
	return nil
}

type NestedEnumResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NestedMsg *NestedEnumResponse_NestedMsg `protobuf:"bytes,2,opt,name=nested_msg,json=nestedMsg,proto3" json:"nested_msg,omitempty"`
}

func (x *NestedEnumResponse) Reset() {
	*x = NestedEnumResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_tests_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedEnumResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedEnumResponse) ProtoMessage() {}

func (x *NestedEnumResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_tests_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedEnumResponse.ProtoReflect.Descriptor instead.
func (*NestedEnumResponse) Descriptor() ([]byte, []int) {
	return file_testdata_tests_proto_rawDescGZIP(), []int{15}
}

func (x *NestedEnumResponse) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NestedEnumResponse) GetNestedMsg() *NestedEnumResponse_NestedMsg {
	if x != nil {
		return x.NestedMsg
	}
	return nil
}

type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_tests_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_tests_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_testdata_tests_proto_rawDescGZIP(), []int{16}
}

type EmptyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyResponse) Reset() {
	*x = EmptyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_tests_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyResponse) ProtoMessage() {}

func (x *EmptyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_tests_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyResponse.ProtoReflect.Descriptor instead.
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return file_testdata_tests_proto_rawDescGZIP(), []int{17}
}

type SampleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SampleResponse) Reset() {
	*x = SampleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_tests_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleResponse) ProtoMessage() {}

func (x *SampleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_tests_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleResponse.ProtoReflect.Descriptor instead.
func (*SampleResponse) Descriptor() ([]byte, []int) {
	return file_testdata_tests_proto_rawDescGZIP(), []int{18}
}

type NestedEnumResponse_NestedMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NestedId   uint32                                  `protobuf:"varint,1,opt,name=nested_id,json=nestedId,proto3" json:"nested_id,omitempty"`
	NestedEnum NestedEnumResponse_NestedMsg_NestedEnum `protobuf:"varint,2,opt,name=nested_enum,json=nestedEnum,proto3,enum=testdata.NestedEnumResponse_NestedMsg_NestedEnum" json:"nested_enum,omitempty"`
}

func (x *NestedEnumResponse_NestedMsg) Reset() {
	*x = NestedEnumResponse_NestedMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_tests_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedEnumResponse_NestedMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedEnumResponse_NestedMsg) ProtoMessage() {}

func (x *NestedEnumResponse_NestedMsg) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_tests_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedEnumResponse_NestedMsg.ProtoReflect.Descriptor instead.
func (*NestedEnumResponse_NestedMsg) Descriptor() ([]byte, []int) {
	return file_testdata_tests_proto_rawDescGZIP(), []int{15, 0}
}

func (x *NestedEnumResponse_NestedMsg) GetNestedId() uint32 {
	if x != nil {
		return x.NestedId
	}
	return 0
}

func (x *NestedEnumResponse_NestedMsg) GetNestedEnum() NestedEnumResponse_NestedMsg_NestedEnum {
	if x != nil {
		return x.NestedEnum
	}
	return NestedEnumResponse_NestedMsg_span
}

var File_testdata_tests_proto protoreflect.FileDescriptor

var file_testdata_tests_proto_rawDesc = []byte{
	0x0a, 0x14, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x04, 0x0a, 0x13, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x43, 0x61, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x61, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x43, 0x61, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x61, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x43, 0x61, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x61, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x43, 0x61, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x63, 0x61, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x43, 0x61, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f,
	0x63, 0x61, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x43, 0x61, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x0c,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x43, 0x61, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x10, 0x52, 0x0c, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x43, 0x61, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x73, 0x74, 0x12,
	0x41, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x61, 0x73,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x43, 0x61,
	0x73, 0x74, 0x22, 0x2c, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xb4, 0x02, 0x0a, 0x0f, 0x47, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x36, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x67, 0x6f, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x36, 0x34, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33,
	0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x67, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x33, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x67, 0x6f, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6f, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x6f, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6f, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x6f, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x6f, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x67, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x0c, 0x67, 0x6f, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x67, 0x6f, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x5b, 0x0a, 0x1c, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x67, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x04,
	0x70, 0x6f, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3e, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x22, 0x70, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0e, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x0a, 0x19, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12,
	0x42, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x4f, 0x6e, 0x22, 0x5d, 0x0a, 0x13, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6c,
	0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x6c, 0x6f,
	0x67, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x66, 0x0a, 0x1f, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08,
	0x74, 0x61, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x67, 0x50, 0x6f, 0x73,
	0x74, 0x52, 0x07, 0x74, 0x61, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x07, 0x54, 0x61,
	0x67, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x42, 0x6c, 0x6f, 0x67, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x67, 0x22,
	0x23, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x62,
	0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x6c,
	0x6f, 0x67, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x0a, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x6c,
	0x6f, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x67, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x22, 0x61, 0x0a, 0x1f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x6e, 0x65, 0x50, 0x6f, 0x73,
	0x74, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x07, 0x4f, 0x6e, 0x65, 0x50, 0x6f,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x8b, 0x02, 0x0a, 0x12, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d,
	0x73, 0x67, 0x52, 0x09, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x1a, 0x9d, 0x01,
	0x0a, 0x09, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0b, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4d, 0x73, 0x67, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x0a, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x22, 0x1f, 0x0a, 0x0a,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x08, 0x0a, 0x04, 0x73, 0x70,
	0x61, 0x6e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x65, 0x67, 0x67, 0x10, 0x01, 0x22, 0x0e, 0x0a,
	0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0f, 0x0a,
	0x0d, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x10,
	0x0a, 0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0xa2, 0x01, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x61,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x44, 0x0a, 0x0e, 0x49, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x15, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x47, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xea, 0x0f, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x14,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x73, 0x45, 0x78, 0x65, 0x63, 0x12, 0x16, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0b, 0x45, 0x78, 0x65,
	0x63, 0x41, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x10,
	0x55, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x12, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x14,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x46, 0x6f, 0x72, 0x55,
	0x6e, 0x61, 0x72, 0x79, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x00,
	0x12, 0x3c, 0x0a, 0x0e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x46, 0x6f, 0x72, 0x55, 0x6e, 0x61,
	0x72, 0x79, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x52,
	0x0a, 0x11, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b,
	0x0a, 0x10, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x11, 0x4e,
	0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x12, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x17,
	0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x17,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x41, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x11,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x16, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x6c, 0x74, 0x73,
	0x46, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x61, 0x70, 0x73, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x0a, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x16,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x67, 0x42, 0x12,
	0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3c, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x67, 0x73, 0x42, 0x12, 0x16, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x42,
	0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x3a, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x67, 0x42, 0x46, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x07, 0x42,
	0x6c, 0x6f, 0x67, 0x73, 0x42, 0x46, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x39, 0x0a, 0x05, 0x42, 0x6c,
	0x6f, 0x67, 0x41, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x67, 0x73, 0x41, 0x12,
	0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x3a, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x67, 0x41, 0x46, 0x12, 0x16, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3d, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x67, 0x73, 0x41, 0x46, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x6c,
	0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x39,
	0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x67, 0x43, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x06, 0x42, 0x6c, 0x6f,
	0x67, 0x73, 0x43, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3a, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x67, 0x43,
	0x46, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x67, 0x73, 0x43, 0x46, 0x12, 0x16,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6a, 0x61, 0x63, 0x6b, 0x73, 0x6b, 0x6a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x6d, 0x61, 0x70, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x3b, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_testdata_tests_proto_rawDescOnce sync.Once
	file_testdata_tests_proto_rawDescData = file_testdata_tests_proto_rawDesc
)

func file_testdata_tests_proto_rawDescGZIP() []byte {
	file_testdata_tests_proto_rawDescOnce.Do(func() {
		file_testdata_tests_proto_rawDescData = protoimpl.X.CompressGZIP(file_testdata_tests_proto_rawDescData)
	})
	return file_testdata_tests_proto_rawDescData
}

var file_testdata_tests_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_testdata_tests_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_testdata_tests_proto_goTypes = []interface{}{
	(NestedEnumResponse_NestedMsg_NestedEnum)(0), // 0: testdata.NestedEnumResponse.NestedMsg.NestedEnum
	(*TypeCastingResponse)(nil),                  // 1: testdata.TypeCastingResponse
	(*TypeRequest)(nil),                          // 2: testdata.TypeRequest
	(*GoTypesResponse)(nil),                      // 3: testdata.GoTypesResponse
	(*RepeatedAssociationsResponse)(nil),         // 4: testdata.RepeatedAssociationsResponse
	(*AuthorUserNameResponse)(nil),               // 5: testdata.AuthorUserNameResponse
	(*RepeatedPrimativeResponse)(nil),            // 6: testdata.RepeatedPrimativeResponse
	(*RepeatedEmptyResponse)(nil),                // 7: testdata.RepeatedEmptyResponse
	(*RepeatedTimestampResponse)(nil),            // 8: testdata.RepeatedTimestampResponse
	(*NestedFieldResponse)(nil),                  // 9: testdata.NestedFieldResponse
	(*AssociationInCollectionResponse)(nil),      // 10: testdata.AssociationInCollectionResponse
	(*TagPost)(nil),                              // 11: testdata.TagPost
	(*PostBlog)(nil),                             // 12: testdata.PostBlog
	(*NestedBlog)(nil),                           // 13: testdata.NestedBlog
	(*CollectionInAssociationResponse)(nil),      // 14: testdata.CollectionInAssociationResponse
	(*OnePost)(nil),                              // 15: testdata.OnePost
	(*NestedEnumResponse)(nil),                   // 16: testdata.NestedEnumResponse
	(*EmptyRequest)(nil),                         // 17: testdata.EmptyRequest
	(*EmptyResponse)(nil),                        // 18: testdata.EmptyResponse
	(*SampleResponse)(nil),                       // 19: testdata.SampleResponse
	(*NestedEnumResponse_NestedMsg)(nil),         // 20: testdata.NestedEnumResponse.NestedMsg
	(*timestamp.Timestamp)(nil),                  // 21: google.protobuf.Timestamp
	(*examples.Post)(nil),                        // 22: examples.Post
	(*examples.Author)(nil),                      // 23: examples.Author
	(*examples.Comment)(nil),                     // 24: examples.Comment
	(*examples.BlogResponse)(nil),                // 25: examples.BlogResponse
}
var file_testdata_tests_proto_depIdxs = []int32{
	21, // 0: testdata.TypeCastingResponse.timestamp_cast:type_name -> google.protobuf.Timestamp
	21, // 1: testdata.GoTypesResponse.go_timestamp:type_name -> google.protobuf.Timestamp
	22, // 2: testdata.RepeatedAssociationsResponse.post:type_name -> examples.Post
	18, // 3: testdata.RepeatedEmptyResponse.empty_response:type_name -> testdata.EmptyResponse
	21, // 4: testdata.RepeatedTimestampResponse.post_created_on:type_name -> google.protobuf.Timestamp
	18, // 5: testdata.NestedFieldResponse.empty:type_name -> testdata.EmptyResponse
	11, // 6: testdata.AssociationInCollectionResponse.tag_post:type_name -> testdata.TagPost
	12, // 7: testdata.TagPost.post_blog:type_name -> testdata.PostBlog
	23, // 8: testdata.NestedBlog.author:type_name -> examples.Author
	15, // 9: testdata.CollectionInAssociationResponse.post:type_name -> testdata.OnePost
	24, // 10: testdata.OnePost.comment:type_name -> examples.Comment
	20, // 11: testdata.NestedEnumResponse.nested_msg:type_name -> testdata.NestedEnumResponse.NestedMsg
	0,  // 12: testdata.NestedEnumResponse.NestedMsg.nested_enum:type_name -> testdata.NestedEnumResponse.NestedMsg.NestedEnum
	17, // 13: testdata.TestReflectService.TypeCasting:input_type -> testdata.EmptyRequest
	2,  // 14: testdata.TestReflectService.IncorrectTypes:input_type -> testdata.TypeRequest
	17, // 15: testdata.TestMappingService.RepeatedAssociations:input_type -> testdata.EmptyRequest
	17, // 16: testdata.TestMappingService.EmptyQuery:input_type -> testdata.EmptyRequest
	17, // 17: testdata.TestMappingService.InsertQueryAsExec:input_type -> testdata.EmptyRequest
	17, // 18: testdata.TestMappingService.ExecAsQuery:input_type -> testdata.EmptyRequest
	17, // 19: testdata.TestMappingService.UnclaimedColumns:input_type -> testdata.EmptyRequest
	17, // 20: testdata.TestMappingService.MultipleRespForUnary:input_type -> testdata.EmptyRequest
	17, // 21: testdata.TestMappingService.NoRespForUnary:input_type -> testdata.EmptyRequest
	17, // 22: testdata.TestMappingService.RepeatedPrimative:input_type -> testdata.EmptyRequest
	17, // 23: testdata.TestMappingService.RepeatedEmpty:input_type -> testdata.EmptyRequest
	17, // 24: testdata.TestMappingService.EmptyNestedField:input_type -> testdata.EmptyRequest
	17, // 25: testdata.TestMappingService.NoMatchingColumns:input_type -> testdata.EmptyRequest
	17, // 26: testdata.TestMappingService.AssociationInCollection:input_type -> testdata.EmptyRequest
	17, // 27: testdata.TestMappingService.CollectionInAssociation:input_type -> testdata.EmptyRequest
	17, // 28: testdata.TestMappingService.RepeatedTimestamp:input_type -> testdata.EmptyRequest
	17, // 29: testdata.TestMappingService.NullResoultsForSubmaps:input_type -> testdata.EmptyRequest
	17, // 30: testdata.TestMappingService.SimpleEnum:input_type -> testdata.EmptyRequest
	17, // 31: testdata.TestMappingService.NestedEnum:input_type -> testdata.EmptyRequest
	17, // 32: testdata.TestMappingService.BlogB:input_type -> testdata.EmptyRequest
	17, // 33: testdata.TestMappingService.BlogsB:input_type -> testdata.EmptyRequest
	17, // 34: testdata.TestMappingService.BlogBF:input_type -> testdata.EmptyRequest
	17, // 35: testdata.TestMappingService.BlogsBF:input_type -> testdata.EmptyRequest
	17, // 36: testdata.TestMappingService.BlogA:input_type -> testdata.EmptyRequest
	17, // 37: testdata.TestMappingService.BlogsA:input_type -> testdata.EmptyRequest
	17, // 38: testdata.TestMappingService.BlogAF:input_type -> testdata.EmptyRequest
	17, // 39: testdata.TestMappingService.BlogsAF:input_type -> testdata.EmptyRequest
	17, // 40: testdata.TestMappingService.BlogC:input_type -> testdata.EmptyRequest
	17, // 41: testdata.TestMappingService.BlogsC:input_type -> testdata.EmptyRequest
	17, // 42: testdata.TestMappingService.BlogCF:input_type -> testdata.EmptyRequest
	17, // 43: testdata.TestMappingService.BlogsCF:input_type -> testdata.EmptyRequest
	1,  // 44: testdata.TestReflectService.TypeCasting:output_type -> testdata.TypeCastingResponse
	3,  // 45: testdata.TestReflectService.IncorrectTypes:output_type -> testdata.GoTypesResponse
	4,  // 46: testdata.TestMappingService.RepeatedAssociations:output_type -> testdata.RepeatedAssociationsResponse
	19, // 47: testdata.TestMappingService.EmptyQuery:output_type -> testdata.SampleResponse
	23, // 48: testdata.TestMappingService.InsertQueryAsExec:output_type -> examples.Author
	19, // 49: testdata.TestMappingService.ExecAsQuery:output_type -> testdata.SampleResponse
	5,  // 50: testdata.TestMappingService.UnclaimedColumns:output_type -> testdata.AuthorUserNameResponse
	23, // 51: testdata.TestMappingService.MultipleRespForUnary:output_type -> examples.Author
	23, // 52: testdata.TestMappingService.NoRespForUnary:output_type -> examples.Author
	6,  // 53: testdata.TestMappingService.RepeatedPrimative:output_type -> testdata.RepeatedPrimativeResponse
	7,  // 54: testdata.TestMappingService.RepeatedEmpty:output_type -> testdata.RepeatedEmptyResponse
	9,  // 55: testdata.TestMappingService.EmptyNestedField:output_type -> testdata.NestedFieldResponse
	23, // 56: testdata.TestMappingService.NoMatchingColumns:output_type -> examples.Author
	10, // 57: testdata.TestMappingService.AssociationInCollection:output_type -> testdata.AssociationInCollectionResponse
	14, // 58: testdata.TestMappingService.CollectionInAssociation:output_type -> testdata.CollectionInAssociationResponse
	8,  // 59: testdata.TestMappingService.RepeatedTimestamp:output_type -> testdata.RepeatedTimestampResponse
	22, // 60: testdata.TestMappingService.NullResoultsForSubmaps:output_type -> examples.Post
	23, // 61: testdata.TestMappingService.SimpleEnum:output_type -> examples.Author
	16, // 62: testdata.TestMappingService.NestedEnum:output_type -> testdata.NestedEnumResponse
	25, // 63: testdata.TestMappingService.BlogB:output_type -> examples.BlogResponse
	25, // 64: testdata.TestMappingService.BlogsB:output_type -> examples.BlogResponse
	25, // 65: testdata.TestMappingService.BlogBF:output_type -> examples.BlogResponse
	25, // 66: testdata.TestMappingService.BlogsBF:output_type -> examples.BlogResponse
	25, // 67: testdata.TestMappingService.BlogA:output_type -> examples.BlogResponse
	25, // 68: testdata.TestMappingService.BlogsA:output_type -> examples.BlogResponse
	25, // 69: testdata.TestMappingService.BlogAF:output_type -> examples.BlogResponse
	25, // 70: testdata.TestMappingService.BlogsAF:output_type -> examples.BlogResponse
	25, // 71: testdata.TestMappingService.BlogC:output_type -> examples.BlogResponse
	25, // 72: testdata.TestMappingService.BlogsC:output_type -> examples.BlogResponse
	25, // 73: testdata.TestMappingService.BlogCF:output_type -> examples.BlogResponse
	25, // 74: testdata.TestMappingService.BlogsCF:output_type -> examples.BlogResponse
	44, // [44:75] is the sub-list for method output_type
	13, // [13:44] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_testdata_tests_proto_init() }
func file_testdata_tests_proto_init() {
	if File_testdata_tests_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_testdata_tests_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeCastingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_tests_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_tests_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_tests_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedAssociationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_tests_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorUserNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_tests_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedPrimativeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_tests_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedEmptyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_tests_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedTimestampResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_tests_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedFieldResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_tests_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssociationInCollectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_tests_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_tests_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostBlog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_tests_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedBlog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_tests_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionInAssociationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_tests_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnePost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_tests_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedEnumResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_tests_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_tests_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_tests_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_tests_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedEnumResponse_NestedMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_testdata_tests_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_testdata_tests_proto_goTypes,
		DependencyIndexes: file_testdata_tests_proto_depIdxs,
		EnumInfos:         file_testdata_tests_proto_enumTypes,
		MessageInfos:      file_testdata_tests_proto_msgTypes,
	}.Build()
	File_testdata_tests_proto = out.File
	file_testdata_tests_proto_rawDesc = nil
	file_testdata_tests_proto_goTypes = nil
	file_testdata_tests_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TestReflectServiceClient is the client API for TestReflectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestReflectServiceClient interface {
	TypeCasting(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*TypeCastingResponse, error)
	IncorrectTypes(ctx context.Context, in *TypeRequest, opts ...grpc.CallOption) (*GoTypesResponse, error)
}

type testReflectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestReflectServiceClient(cc grpc.ClientConnInterface) TestReflectServiceClient {
	return &testReflectServiceClient{cc}
}

func (c *testReflectServiceClient) TypeCasting(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*TypeCastingResponse, error) {
	out := new(TypeCastingResponse)
	err := c.cc.Invoke(ctx, "/testdata.TestReflectService/TypeCasting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testReflectServiceClient) IncorrectTypes(ctx context.Context, in *TypeRequest, opts ...grpc.CallOption) (*GoTypesResponse, error) {
	out := new(GoTypesResponse)
	err := c.cc.Invoke(ctx, "/testdata.TestReflectService/IncorrectTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestReflectServiceServer is the server API for TestReflectService service.
type TestReflectServiceServer interface {
	TypeCasting(context.Context, *EmptyRequest) (*TypeCastingResponse, error)
	IncorrectTypes(context.Context, *TypeRequest) (*GoTypesResponse, error)
}

// UnimplementedTestReflectServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTestReflectServiceServer struct {
}

func (*UnimplementedTestReflectServiceServer) TypeCasting(context.Context, *EmptyRequest) (*TypeCastingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TypeCasting not implemented")
}
func (*UnimplementedTestReflectServiceServer) IncorrectTypes(context.Context, *TypeRequest) (*GoTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncorrectTypes not implemented")
}

func RegisterTestReflectServiceServer(s *grpc.Server, srv TestReflectServiceServer) {
	s.RegisterService(&_TestReflectService_serviceDesc, srv)
}

func _TestReflectService_TypeCasting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestReflectServiceServer).TypeCasting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.TestReflectService/TypeCasting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestReflectServiceServer).TypeCasting(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestReflectService_IncorrectTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestReflectServiceServer).IncorrectTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.TestReflectService/IncorrectTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestReflectServiceServer).IncorrectTypes(ctx, req.(*TypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestReflectService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testdata.TestReflectService",
	HandlerType: (*TestReflectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TypeCasting",
			Handler:    _TestReflectService_TypeCasting_Handler,
		},
		{
			MethodName: "IncorrectTypes",
			Handler:    _TestReflectService_IncorrectTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testdata/tests.proto",
}

// TestMappingServiceClient is the client API for TestMappingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestMappingServiceClient interface {
	RepeatedAssociations(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*RepeatedAssociationsResponse, error)
	EmptyQuery(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SampleResponse, error)
	InsertQueryAsExec(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*examples.Author, error)
	ExecAsQuery(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SampleResponse, error)
	UnclaimedColumns(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AuthorUserNameResponse, error)
	MultipleRespForUnary(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*examples.Author, error)
	NoRespForUnary(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*examples.Author, error)
	RepeatedPrimative(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*RepeatedPrimativeResponse, error)
	RepeatedEmpty(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*RepeatedEmptyResponse, error)
	EmptyNestedField(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*NestedFieldResponse, error)
	NoMatchingColumns(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*examples.Author, error)
	AssociationInCollection(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AssociationInCollectionResponse, error)
	CollectionInAssociation(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CollectionInAssociationResponse, error)
	RepeatedTimestamp(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*RepeatedTimestampResponse, error)
	NullResoultsForSubmaps(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (TestMappingService_NullResoultsForSubmapsClient, error)
	SimpleEnum(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*examples.Author, error)
	NestedEnum(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*NestedEnumResponse, error)
	//callbacks
	//Before Query
	BlogB(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*examples.BlogResponse, error)
	BlogsB(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (TestMappingService_BlogsBClient, error)
	BlogBF(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*examples.BlogResponse, error)
	BlogsBF(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (TestMappingService_BlogsBFClient, error)
	//Before After Query
	BlogA(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*examples.BlogResponse, error)
	BlogsA(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (TestMappingService_BlogsAClient, error)
	BlogAF(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*examples.BlogResponse, error)
	BlogsAF(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (TestMappingService_BlogsAFClient, error)
	//Cache
	BlogC(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*examples.BlogResponse, error)
	BlogsC(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (TestMappingService_BlogsCClient, error)
	BlogCF(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*examples.BlogResponse, error)
	BlogsCF(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (TestMappingService_BlogsCFClient, error)
}

type testMappingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestMappingServiceClient(cc grpc.ClientConnInterface) TestMappingServiceClient {
	return &testMappingServiceClient{cc}
}

func (c *testMappingServiceClient) RepeatedAssociations(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*RepeatedAssociationsResponse, error) {
	out := new(RepeatedAssociationsResponse)
	err := c.cc.Invoke(ctx, "/testdata.TestMappingService/RepeatedAssociations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testMappingServiceClient) EmptyQuery(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SampleResponse, error) {
	out := new(SampleResponse)
	err := c.cc.Invoke(ctx, "/testdata.TestMappingService/EmptyQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testMappingServiceClient) InsertQueryAsExec(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*examples.Author, error) {
	out := new(examples.Author)
	err := c.cc.Invoke(ctx, "/testdata.TestMappingService/InsertQueryAsExec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testMappingServiceClient) ExecAsQuery(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SampleResponse, error) {
	out := new(SampleResponse)
	err := c.cc.Invoke(ctx, "/testdata.TestMappingService/ExecAsQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testMappingServiceClient) UnclaimedColumns(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AuthorUserNameResponse, error) {
	out := new(AuthorUserNameResponse)
	err := c.cc.Invoke(ctx, "/testdata.TestMappingService/UnclaimedColumns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testMappingServiceClient) MultipleRespForUnary(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*examples.Author, error) {
	out := new(examples.Author)
	err := c.cc.Invoke(ctx, "/testdata.TestMappingService/MultipleRespForUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testMappingServiceClient) NoRespForUnary(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*examples.Author, error) {
	out := new(examples.Author)
	err := c.cc.Invoke(ctx, "/testdata.TestMappingService/NoRespForUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testMappingServiceClient) RepeatedPrimative(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*RepeatedPrimativeResponse, error) {
	out := new(RepeatedPrimativeResponse)
	err := c.cc.Invoke(ctx, "/testdata.TestMappingService/RepeatedPrimative", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testMappingServiceClient) RepeatedEmpty(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*RepeatedEmptyResponse, error) {
	out := new(RepeatedEmptyResponse)
	err := c.cc.Invoke(ctx, "/testdata.TestMappingService/RepeatedEmpty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testMappingServiceClient) EmptyNestedField(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*NestedFieldResponse, error) {
	out := new(NestedFieldResponse)
	err := c.cc.Invoke(ctx, "/testdata.TestMappingService/EmptyNestedField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testMappingServiceClient) NoMatchingColumns(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*examples.Author, error) {
	out := new(examples.Author)
	err := c.cc.Invoke(ctx, "/testdata.TestMappingService/NoMatchingColumns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testMappingServiceClient) AssociationInCollection(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AssociationInCollectionResponse, error) {
	out := new(AssociationInCollectionResponse)
	err := c.cc.Invoke(ctx, "/testdata.TestMappingService/AssociationInCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testMappingServiceClient) CollectionInAssociation(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CollectionInAssociationResponse, error) {
	out := new(CollectionInAssociationResponse)
	err := c.cc.Invoke(ctx, "/testdata.TestMappingService/CollectionInAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testMappingServiceClient) RepeatedTimestamp(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*RepeatedTimestampResponse, error) {
	out := new(RepeatedTimestampResponse)
	err := c.cc.Invoke(ctx, "/testdata.TestMappingService/RepeatedTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testMappingServiceClient) NullResoultsForSubmaps(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (TestMappingService_NullResoultsForSubmapsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestMappingService_serviceDesc.Streams[0], "/testdata.TestMappingService/NullResoultsForSubmaps", opts...)
	if err != nil {
		return nil, err
	}
	x := &testMappingServiceNullResoultsForSubmapsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestMappingService_NullResoultsForSubmapsClient interface {
	Recv() (*examples.Post, error)
	grpc.ClientStream
}

type testMappingServiceNullResoultsForSubmapsClient struct {
	grpc.ClientStream
}

func (x *testMappingServiceNullResoultsForSubmapsClient) Recv() (*examples.Post, error) {
	m := new(examples.Post)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testMappingServiceClient) SimpleEnum(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*examples.Author, error) {
	out := new(examples.Author)
	err := c.cc.Invoke(ctx, "/testdata.TestMappingService/SimpleEnum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testMappingServiceClient) NestedEnum(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*NestedEnumResponse, error) {
	out := new(NestedEnumResponse)
	err := c.cc.Invoke(ctx, "/testdata.TestMappingService/NestedEnum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testMappingServiceClient) BlogB(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*examples.BlogResponse, error) {
	out := new(examples.BlogResponse)
	err := c.cc.Invoke(ctx, "/testdata.TestMappingService/BlogB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testMappingServiceClient) BlogsB(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (TestMappingService_BlogsBClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestMappingService_serviceDesc.Streams[1], "/testdata.TestMappingService/BlogsB", opts...)
	if err != nil {
		return nil, err
	}
	x := &testMappingServiceBlogsBClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestMappingService_BlogsBClient interface {
	Recv() (*examples.BlogResponse, error)
	grpc.ClientStream
}

type testMappingServiceBlogsBClient struct {
	grpc.ClientStream
}

func (x *testMappingServiceBlogsBClient) Recv() (*examples.BlogResponse, error) {
	m := new(examples.BlogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testMappingServiceClient) BlogBF(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*examples.BlogResponse, error) {
	out := new(examples.BlogResponse)
	err := c.cc.Invoke(ctx, "/testdata.TestMappingService/BlogBF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testMappingServiceClient) BlogsBF(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (TestMappingService_BlogsBFClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestMappingService_serviceDesc.Streams[2], "/testdata.TestMappingService/BlogsBF", opts...)
	if err != nil {
		return nil, err
	}
	x := &testMappingServiceBlogsBFClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestMappingService_BlogsBFClient interface {
	Recv() (*examples.BlogResponse, error)
	grpc.ClientStream
}

type testMappingServiceBlogsBFClient struct {
	grpc.ClientStream
}

func (x *testMappingServiceBlogsBFClient) Recv() (*examples.BlogResponse, error) {
	m := new(examples.BlogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testMappingServiceClient) BlogA(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*examples.BlogResponse, error) {
	out := new(examples.BlogResponse)
	err := c.cc.Invoke(ctx, "/testdata.TestMappingService/BlogA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testMappingServiceClient) BlogsA(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (TestMappingService_BlogsAClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestMappingService_serviceDesc.Streams[3], "/testdata.TestMappingService/BlogsA", opts...)
	if err != nil {
		return nil, err
	}
	x := &testMappingServiceBlogsAClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestMappingService_BlogsAClient interface {
	Recv() (*examples.BlogResponse, error)
	grpc.ClientStream
}

type testMappingServiceBlogsAClient struct {
	grpc.ClientStream
}

func (x *testMappingServiceBlogsAClient) Recv() (*examples.BlogResponse, error) {
	m := new(examples.BlogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testMappingServiceClient) BlogAF(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*examples.BlogResponse, error) {
	out := new(examples.BlogResponse)
	err := c.cc.Invoke(ctx, "/testdata.TestMappingService/BlogAF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testMappingServiceClient) BlogsAF(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (TestMappingService_BlogsAFClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestMappingService_serviceDesc.Streams[4], "/testdata.TestMappingService/BlogsAF", opts...)
	if err != nil {
		return nil, err
	}
	x := &testMappingServiceBlogsAFClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestMappingService_BlogsAFClient interface {
	Recv() (*examples.BlogResponse, error)
	grpc.ClientStream
}

type testMappingServiceBlogsAFClient struct {
	grpc.ClientStream
}

func (x *testMappingServiceBlogsAFClient) Recv() (*examples.BlogResponse, error) {
	m := new(examples.BlogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testMappingServiceClient) BlogC(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*examples.BlogResponse, error) {
	out := new(examples.BlogResponse)
	err := c.cc.Invoke(ctx, "/testdata.TestMappingService/BlogC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testMappingServiceClient) BlogsC(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (TestMappingService_BlogsCClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestMappingService_serviceDesc.Streams[5], "/testdata.TestMappingService/BlogsC", opts...)
	if err != nil {
		return nil, err
	}
	x := &testMappingServiceBlogsCClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestMappingService_BlogsCClient interface {
	Recv() (*examples.BlogResponse, error)
	grpc.ClientStream
}

type testMappingServiceBlogsCClient struct {
	grpc.ClientStream
}

func (x *testMappingServiceBlogsCClient) Recv() (*examples.BlogResponse, error) {
	m := new(examples.BlogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testMappingServiceClient) BlogCF(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*examples.BlogResponse, error) {
	out := new(examples.BlogResponse)
	err := c.cc.Invoke(ctx, "/testdata.TestMappingService/BlogCF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testMappingServiceClient) BlogsCF(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (TestMappingService_BlogsCFClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestMappingService_serviceDesc.Streams[6], "/testdata.TestMappingService/BlogsCF", opts...)
	if err != nil {
		return nil, err
	}
	x := &testMappingServiceBlogsCFClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestMappingService_BlogsCFClient interface {
	Recv() (*examples.BlogResponse, error)
	grpc.ClientStream
}

type testMappingServiceBlogsCFClient struct {
	grpc.ClientStream
}

func (x *testMappingServiceBlogsCFClient) Recv() (*examples.BlogResponse, error) {
	m := new(examples.BlogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestMappingServiceServer is the server API for TestMappingService service.
type TestMappingServiceServer interface {
	RepeatedAssociations(context.Context, *EmptyRequest) (*RepeatedAssociationsResponse, error)
	EmptyQuery(context.Context, *EmptyRequest) (*SampleResponse, error)
	InsertQueryAsExec(context.Context, *EmptyRequest) (*examples.Author, error)
	ExecAsQuery(context.Context, *EmptyRequest) (*SampleResponse, error)
	UnclaimedColumns(context.Context, *EmptyRequest) (*AuthorUserNameResponse, error)
	MultipleRespForUnary(context.Context, *EmptyRequest) (*examples.Author, error)
	NoRespForUnary(context.Context, *EmptyRequest) (*examples.Author, error)
	RepeatedPrimative(context.Context, *EmptyRequest) (*RepeatedPrimativeResponse, error)
	RepeatedEmpty(context.Context, *EmptyRequest) (*RepeatedEmptyResponse, error)
	EmptyNestedField(context.Context, *EmptyRequest) (*NestedFieldResponse, error)
	NoMatchingColumns(context.Context, *EmptyRequest) (*examples.Author, error)
	AssociationInCollection(context.Context, *EmptyRequest) (*AssociationInCollectionResponse, error)
	CollectionInAssociation(context.Context, *EmptyRequest) (*CollectionInAssociationResponse, error)
	RepeatedTimestamp(context.Context, *EmptyRequest) (*RepeatedTimestampResponse, error)
	NullResoultsForSubmaps(*EmptyRequest, TestMappingService_NullResoultsForSubmapsServer) error
	SimpleEnum(context.Context, *EmptyRequest) (*examples.Author, error)
	NestedEnum(context.Context, *EmptyRequest) (*NestedEnumResponse, error)
	//callbacks
	//Before Query
	BlogB(context.Context, *EmptyRequest) (*examples.BlogResponse, error)
	BlogsB(*EmptyRequest, TestMappingService_BlogsBServer) error
	BlogBF(context.Context, *EmptyRequest) (*examples.BlogResponse, error)
	BlogsBF(*EmptyRequest, TestMappingService_BlogsBFServer) error
	//Before After Query
	BlogA(context.Context, *EmptyRequest) (*examples.BlogResponse, error)
	BlogsA(*EmptyRequest, TestMappingService_BlogsAServer) error
	BlogAF(context.Context, *EmptyRequest) (*examples.BlogResponse, error)
	BlogsAF(*EmptyRequest, TestMappingService_BlogsAFServer) error
	//Cache
	BlogC(context.Context, *EmptyRequest) (*examples.BlogResponse, error)
	BlogsC(*EmptyRequest, TestMappingService_BlogsCServer) error
	BlogCF(context.Context, *EmptyRequest) (*examples.BlogResponse, error)
	BlogsCF(*EmptyRequest, TestMappingService_BlogsCFServer) error
}

// UnimplementedTestMappingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTestMappingServiceServer struct {
}

func (*UnimplementedTestMappingServiceServer) RepeatedAssociations(context.Context, *EmptyRequest) (*RepeatedAssociationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepeatedAssociations not implemented")
}
func (*UnimplementedTestMappingServiceServer) EmptyQuery(context.Context, *EmptyRequest) (*SampleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmptyQuery not implemented")
}
func (*UnimplementedTestMappingServiceServer) InsertQueryAsExec(context.Context, *EmptyRequest) (*examples.Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertQueryAsExec not implemented")
}
func (*UnimplementedTestMappingServiceServer) ExecAsQuery(context.Context, *EmptyRequest) (*SampleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecAsQuery not implemented")
}
func (*UnimplementedTestMappingServiceServer) UnclaimedColumns(context.Context, *EmptyRequest) (*AuthorUserNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnclaimedColumns not implemented")
}
func (*UnimplementedTestMappingServiceServer) MultipleRespForUnary(context.Context, *EmptyRequest) (*examples.Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultipleRespForUnary not implemented")
}
func (*UnimplementedTestMappingServiceServer) NoRespForUnary(context.Context, *EmptyRequest) (*examples.Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoRespForUnary not implemented")
}
func (*UnimplementedTestMappingServiceServer) RepeatedPrimative(context.Context, *EmptyRequest) (*RepeatedPrimativeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepeatedPrimative not implemented")
}
func (*UnimplementedTestMappingServiceServer) RepeatedEmpty(context.Context, *EmptyRequest) (*RepeatedEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepeatedEmpty not implemented")
}
func (*UnimplementedTestMappingServiceServer) EmptyNestedField(context.Context, *EmptyRequest) (*NestedFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmptyNestedField not implemented")
}
func (*UnimplementedTestMappingServiceServer) NoMatchingColumns(context.Context, *EmptyRequest) (*examples.Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoMatchingColumns not implemented")
}
func (*UnimplementedTestMappingServiceServer) AssociationInCollection(context.Context, *EmptyRequest) (*AssociationInCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssociationInCollection not implemented")
}
func (*UnimplementedTestMappingServiceServer) CollectionInAssociation(context.Context, *EmptyRequest) (*CollectionInAssociationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionInAssociation not implemented")
}
func (*UnimplementedTestMappingServiceServer) RepeatedTimestamp(context.Context, *EmptyRequest) (*RepeatedTimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepeatedTimestamp not implemented")
}
func (*UnimplementedTestMappingServiceServer) NullResoultsForSubmaps(*EmptyRequest, TestMappingService_NullResoultsForSubmapsServer) error {
	return status.Errorf(codes.Unimplemented, "method NullResoultsForSubmaps not implemented")
}
func (*UnimplementedTestMappingServiceServer) SimpleEnum(context.Context, *EmptyRequest) (*examples.Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleEnum not implemented")
}
func (*UnimplementedTestMappingServiceServer) NestedEnum(context.Context, *EmptyRequest) (*NestedEnumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NestedEnum not implemented")
}
func (*UnimplementedTestMappingServiceServer) BlogB(context.Context, *EmptyRequest) (*examples.BlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlogB not implemented")
}
func (*UnimplementedTestMappingServiceServer) BlogsB(*EmptyRequest, TestMappingService_BlogsBServer) error {
	return status.Errorf(codes.Unimplemented, "method BlogsB not implemented")
}
func (*UnimplementedTestMappingServiceServer) BlogBF(context.Context, *EmptyRequest) (*examples.BlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlogBF not implemented")
}
func (*UnimplementedTestMappingServiceServer) BlogsBF(*EmptyRequest, TestMappingService_BlogsBFServer) error {
	return status.Errorf(codes.Unimplemented, "method BlogsBF not implemented")
}
func (*UnimplementedTestMappingServiceServer) BlogA(context.Context, *EmptyRequest) (*examples.BlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlogA not implemented")
}
func (*UnimplementedTestMappingServiceServer) BlogsA(*EmptyRequest, TestMappingService_BlogsAServer) error {
	return status.Errorf(codes.Unimplemented, "method BlogsA not implemented")
}
func (*UnimplementedTestMappingServiceServer) BlogAF(context.Context, *EmptyRequest) (*examples.BlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlogAF not implemented")
}
func (*UnimplementedTestMappingServiceServer) BlogsAF(*EmptyRequest, TestMappingService_BlogsAFServer) error {
	return status.Errorf(codes.Unimplemented, "method BlogsAF not implemented")
}
func (*UnimplementedTestMappingServiceServer) BlogC(context.Context, *EmptyRequest) (*examples.BlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlogC not implemented")
}
func (*UnimplementedTestMappingServiceServer) BlogsC(*EmptyRequest, TestMappingService_BlogsCServer) error {
	return status.Errorf(codes.Unimplemented, "method BlogsC not implemented")
}
func (*UnimplementedTestMappingServiceServer) BlogCF(context.Context, *EmptyRequest) (*examples.BlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlogCF not implemented")
}
func (*UnimplementedTestMappingServiceServer) BlogsCF(*EmptyRequest, TestMappingService_BlogsCFServer) error {
	return status.Errorf(codes.Unimplemented, "method BlogsCF not implemented")
}

func RegisterTestMappingServiceServer(s *grpc.Server, srv TestMappingServiceServer) {
	s.RegisterService(&_TestMappingService_serviceDesc, srv)
}

func _TestMappingService_RepeatedAssociations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestMappingServiceServer).RepeatedAssociations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.TestMappingService/RepeatedAssociations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestMappingServiceServer).RepeatedAssociations(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestMappingService_EmptyQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestMappingServiceServer).EmptyQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.TestMappingService/EmptyQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestMappingServiceServer).EmptyQuery(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestMappingService_InsertQueryAsExec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestMappingServiceServer).InsertQueryAsExec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.TestMappingService/InsertQueryAsExec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestMappingServiceServer).InsertQueryAsExec(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestMappingService_ExecAsQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestMappingServiceServer).ExecAsQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.TestMappingService/ExecAsQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestMappingServiceServer).ExecAsQuery(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestMappingService_UnclaimedColumns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestMappingServiceServer).UnclaimedColumns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.TestMappingService/UnclaimedColumns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestMappingServiceServer).UnclaimedColumns(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestMappingService_MultipleRespForUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestMappingServiceServer).MultipleRespForUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.TestMappingService/MultipleRespForUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestMappingServiceServer).MultipleRespForUnary(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestMappingService_NoRespForUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestMappingServiceServer).NoRespForUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.TestMappingService/NoRespForUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestMappingServiceServer).NoRespForUnary(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestMappingService_RepeatedPrimative_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestMappingServiceServer).RepeatedPrimative(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.TestMappingService/RepeatedPrimative",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestMappingServiceServer).RepeatedPrimative(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestMappingService_RepeatedEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestMappingServiceServer).RepeatedEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.TestMappingService/RepeatedEmpty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestMappingServiceServer).RepeatedEmpty(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestMappingService_EmptyNestedField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestMappingServiceServer).EmptyNestedField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.TestMappingService/EmptyNestedField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestMappingServiceServer).EmptyNestedField(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestMappingService_NoMatchingColumns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestMappingServiceServer).NoMatchingColumns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.TestMappingService/NoMatchingColumns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestMappingServiceServer).NoMatchingColumns(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestMappingService_AssociationInCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestMappingServiceServer).AssociationInCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.TestMappingService/AssociationInCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestMappingServiceServer).AssociationInCollection(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestMappingService_CollectionInAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestMappingServiceServer).CollectionInAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.TestMappingService/CollectionInAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestMappingServiceServer).CollectionInAssociation(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestMappingService_RepeatedTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestMappingServiceServer).RepeatedTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.TestMappingService/RepeatedTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestMappingServiceServer).RepeatedTimestamp(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestMappingService_NullResoultsForSubmaps_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestMappingServiceServer).NullResoultsForSubmaps(m, &testMappingServiceNullResoultsForSubmapsServer{stream})
}

type TestMappingService_NullResoultsForSubmapsServer interface {
	Send(*examples.Post) error
	grpc.ServerStream
}

type testMappingServiceNullResoultsForSubmapsServer struct {
	grpc.ServerStream
}

func (x *testMappingServiceNullResoultsForSubmapsServer) Send(m *examples.Post) error {
	return x.ServerStream.SendMsg(m)
}

func _TestMappingService_SimpleEnum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestMappingServiceServer).SimpleEnum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.TestMappingService/SimpleEnum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestMappingServiceServer).SimpleEnum(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestMappingService_NestedEnum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestMappingServiceServer).NestedEnum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.TestMappingService/NestedEnum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestMappingServiceServer).NestedEnum(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestMappingService_BlogB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestMappingServiceServer).BlogB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.TestMappingService/BlogB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestMappingServiceServer).BlogB(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestMappingService_BlogsB_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestMappingServiceServer).BlogsB(m, &testMappingServiceBlogsBServer{stream})
}

type TestMappingService_BlogsBServer interface {
	Send(*examples.BlogResponse) error
	grpc.ServerStream
}

type testMappingServiceBlogsBServer struct {
	grpc.ServerStream
}

func (x *testMappingServiceBlogsBServer) Send(m *examples.BlogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TestMappingService_BlogBF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestMappingServiceServer).BlogBF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.TestMappingService/BlogBF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestMappingServiceServer).BlogBF(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestMappingService_BlogsBF_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestMappingServiceServer).BlogsBF(m, &testMappingServiceBlogsBFServer{stream})
}

type TestMappingService_BlogsBFServer interface {
	Send(*examples.BlogResponse) error
	grpc.ServerStream
}

type testMappingServiceBlogsBFServer struct {
	grpc.ServerStream
}

func (x *testMappingServiceBlogsBFServer) Send(m *examples.BlogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TestMappingService_BlogA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestMappingServiceServer).BlogA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.TestMappingService/BlogA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestMappingServiceServer).BlogA(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestMappingService_BlogsA_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestMappingServiceServer).BlogsA(m, &testMappingServiceBlogsAServer{stream})
}

type TestMappingService_BlogsAServer interface {
	Send(*examples.BlogResponse) error
	grpc.ServerStream
}

type testMappingServiceBlogsAServer struct {
	grpc.ServerStream
}

func (x *testMappingServiceBlogsAServer) Send(m *examples.BlogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TestMappingService_BlogAF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestMappingServiceServer).BlogAF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.TestMappingService/BlogAF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestMappingServiceServer).BlogAF(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestMappingService_BlogsAF_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestMappingServiceServer).BlogsAF(m, &testMappingServiceBlogsAFServer{stream})
}

type TestMappingService_BlogsAFServer interface {
	Send(*examples.BlogResponse) error
	grpc.ServerStream
}

type testMappingServiceBlogsAFServer struct {
	grpc.ServerStream
}

func (x *testMappingServiceBlogsAFServer) Send(m *examples.BlogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TestMappingService_BlogC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestMappingServiceServer).BlogC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.TestMappingService/BlogC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestMappingServiceServer).BlogC(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestMappingService_BlogsC_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestMappingServiceServer).BlogsC(m, &testMappingServiceBlogsCServer{stream})
}

type TestMappingService_BlogsCServer interface {
	Send(*examples.BlogResponse) error
	grpc.ServerStream
}

type testMappingServiceBlogsCServer struct {
	grpc.ServerStream
}

func (x *testMappingServiceBlogsCServer) Send(m *examples.BlogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TestMappingService_BlogCF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestMappingServiceServer).BlogCF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.TestMappingService/BlogCF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestMappingServiceServer).BlogCF(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestMappingService_BlogsCF_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestMappingServiceServer).BlogsCF(m, &testMappingServiceBlogsCFServer{stream})
}

type TestMappingService_BlogsCFServer interface {
	Send(*examples.BlogResponse) error
	grpc.ServerStream
}

type testMappingServiceBlogsCFServer struct {
	grpc.ServerStream
}

func (x *testMappingServiceBlogsCFServer) Send(m *examples.BlogResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _TestMappingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testdata.TestMappingService",
	HandlerType: (*TestMappingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RepeatedAssociations",
			Handler:    _TestMappingService_RepeatedAssociations_Handler,
		},
		{
			MethodName: "EmptyQuery",
			Handler:    _TestMappingService_EmptyQuery_Handler,
		},
		{
			MethodName: "InsertQueryAsExec",
			Handler:    _TestMappingService_InsertQueryAsExec_Handler,
		},
		{
			MethodName: "ExecAsQuery",
			Handler:    _TestMappingService_ExecAsQuery_Handler,
		},
		{
			MethodName: "UnclaimedColumns",
			Handler:    _TestMappingService_UnclaimedColumns_Handler,
		},
		{
			MethodName: "MultipleRespForUnary",
			Handler:    _TestMappingService_MultipleRespForUnary_Handler,
		},
		{
			MethodName: "NoRespForUnary",
			Handler:    _TestMappingService_NoRespForUnary_Handler,
		},
		{
			MethodName: "RepeatedPrimative",
			Handler:    _TestMappingService_RepeatedPrimative_Handler,
		},
		{
			MethodName: "RepeatedEmpty",
			Handler:    _TestMappingService_RepeatedEmpty_Handler,
		},
		{
			MethodName: "EmptyNestedField",
			Handler:    _TestMappingService_EmptyNestedField_Handler,
		},
		{
			MethodName: "NoMatchingColumns",
			Handler:    _TestMappingService_NoMatchingColumns_Handler,
		},
		{
			MethodName: "AssociationInCollection",
			Handler:    _TestMappingService_AssociationInCollection_Handler,
		},
		{
			MethodName: "CollectionInAssociation",
			Handler:    _TestMappingService_CollectionInAssociation_Handler,
		},
		{
			MethodName: "RepeatedTimestamp",
			Handler:    _TestMappingService_RepeatedTimestamp_Handler,
		},
		{
			MethodName: "SimpleEnum",
			Handler:    _TestMappingService_SimpleEnum_Handler,
		},
		{
			MethodName: "NestedEnum",
			Handler:    _TestMappingService_NestedEnum_Handler,
		},
		{
			MethodName: "BlogB",
			Handler:    _TestMappingService_BlogB_Handler,
		},
		{
			MethodName: "BlogBF",
			Handler:    _TestMappingService_BlogBF_Handler,
		},
		{
			MethodName: "BlogA",
			Handler:    _TestMappingService_BlogA_Handler,
		},
		{
			MethodName: "BlogAF",
			Handler:    _TestMappingService_BlogAF_Handler,
		},
		{
			MethodName: "BlogC",
			Handler:    _TestMappingService_BlogC_Handler,
		},
		{
			MethodName: "BlogCF",
			Handler:    _TestMappingService_BlogCF_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NullResoultsForSubmaps",
			Handler:       _TestMappingService_NullResoultsForSubmaps_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BlogsB",
			Handler:       _TestMappingService_BlogsB_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BlogsBF",
			Handler:       _TestMappingService_BlogsBF_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BlogsA",
			Handler:       _TestMappingService_BlogsA_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BlogsAF",
			Handler:       _TestMappingService_BlogsAF_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BlogsC",
			Handler:       _TestMappingService_BlogsC_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BlogsCF",
			Handler:       _TestMappingService_BlogsCF_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "testdata/tests.proto",
}
