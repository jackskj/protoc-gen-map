// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: testdata/gentest/only_unary_query.proto

package gentest

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"

	//protoc-gen-map packages
	bytes "bytes"
	context "context"
	sql "database/sql"
	mapper "github.com/jackskj/protoc-gen-map/mapper"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	log "log"
	sync "sync"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Code generated by protoc-gen-map. DO NOT EDIT.
// To Use:
// 1. Instantiate MapperServers with sql.DB connection
// 2. Register MapperServer as the gRPC service server
// 3. Begin serving

type OnlyQuryServiceMapServer struct {
	DB      *sql.DB
	Dialect string

	QueryMapper    *mapper.Mapper
	QueryCallbacks OnlyQuryServiceQueryCallbacks

	mapperGenMux sync.Mutex
}

type OnlyQuryServiceQueryCallbacks struct {
	BeforeQueryCallback []func(queryString string, req *OnlyQury) error
	AfterQueryCallback  []func(queryString string, req *OnlyQury, resp *OnlyQury) error
	Cache               func(queryString string, req *OnlyQury) (*OnlyQury, error)
}

func (m *OnlyQuryServiceMapServer) RegisterQueryBeforeQueryCallback(callbacks ...func(queryString string, req *OnlyQury) error) {
	for _, callback := range callbacks {
		m.QueryCallbacks.BeforeQueryCallback = append(m.QueryCallbacks.BeforeQueryCallback, callback)
	}
}

func (m *OnlyQuryServiceMapServer) RegisterQueryAfterQueryCallback(callbacks ...func(queryString string, req *OnlyQury, resp *OnlyQury) error) {
	for _, callback := range callbacks {
		m.QueryCallbacks.AfterQueryCallback = append(m.QueryCallbacks.AfterQueryCallback, callback)
	}
}

func (m *OnlyQuryServiceMapServer) RegisterQueryCache(cache func(queryString string, req *OnlyQury) (*OnlyQury, error)) {
	m.QueryCallbacks.Cache = cache
}

func (m *OnlyQuryServiceMapServer) Query(ctx context.Context, r *OnlyQury) (*OnlyQury, error) {
	sqlBuffer := &bytes.Buffer{}
	if err := sqlTemplate.ExecuteTemplate(sqlBuffer, "Query", r); err != nil {
		return nil, status.Error(codes.InvalidArgument, err.Error())
	}
	rawSql := sqlBuffer.String()
	for _, callback := range m.QueryCallbacks.BeforeQueryCallback {
		if err := callback(rawSql, r); err != nil {
			log.Println(err.Error())
			return nil, status.Error(codes.Internal, err.Error())
		}
	}
	if m.QueryCallbacks.Cache != nil {
		if resp, err := m.QueryCallbacks.Cache(rawSql, r); err == nil {
			if resp != nil {
				return resp, nil
			}
		} else {
			log.Println(err.Error())
			return nil, status.Error(codes.Internal, err.Error())
		}
	}
	preparedSql, args, err := mapper.PrepareQuery(m.Dialect, sqlBuffer.Bytes())
	if err != nil {
		log.Printf("error preparing sql query.\n OnlyQury request: %s \n query: %s \n error: %s", r, rawSql, err)
		return nil, status.Error(codes.InvalidArgument, "request generated malformed query")
	}
	rows, err := m.DB.Query(preparedSql, args...)
	if err != nil {
		log.Printf("error executing query.\n OnlyQury request: %s \n,query: %s \n error: %s", r, preparedSql, err)
		return nil, status.Error(codes.InvalidArgument, "request generated malformed query")
	} else {
		defer rows.Close()
	}
	if m.QueryMapper == nil {
		m.mapperGenMux.Lock()
		m.QueryMapper, err = mapper.New("Query", rows, &OnlyQury{})
		m.mapperGenMux.Unlock()
		if err != nil {
			log.Printf("error generating QueryMapper: %s", err)
			return nil, status.Error(codes.Internal, "error generating OnlyQury mapping")
		}
		m.QueryMapper.Log()
	}
	respMap := m.QueryMapper.NewResponseMapping()
	if err := m.QueryMapper.GetValues(rows, respMap); err != nil {
		log.Printf("error loading data for Query: %s", err)
		return nil, status.Error(codes.Internal, "error loading data")
	}
	if err := m.QueryMapper.MapResponse(respMap); err != nil {
		log.Printf("error mappig QueryMapper: %s", err)
		m.QueryMapper.Error = nil
		return nil, status.Error(codes.Internal, "error mappig OnlyQury")
	}
	var response *OnlyQury
	if len(respMap.Responses) == 0 {
		//No Responses found
		response = &OnlyQury{}
	} else {
		response = respMap.Responses[0].(*OnlyQury)
	}
	for _, callback := range m.QueryCallbacks.AfterQueryCallback {
		if err := callback(rawSql, r, response); err != nil {
			log.Println(err.Error())
			return nil, status.Error(codes.Internal, err.Error())
		}
	}
	m.QueryMapper.Log()
	return response, nil

}
